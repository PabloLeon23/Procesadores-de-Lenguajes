
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Hashtable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\017\003\000\002\002\004\000\002\020" +
    "\004\000\002\020\005\000\002\021\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\003\000\002\014" +
    "\003\000\002\014\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\004\000\002" +
    "\002\004\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\007\003\000\002\012\003\000\002\011\003\000" +
    "\002\010\003\000\002\010\003\000\002\006\003\000\002" +
    "\015\003\000\002\016\003\000\002\051\004\000\002\051" +
    "\004\000\002\051\003\000\002\051\003\000\002\052\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\030\004\014\005\015\006\016\007\027\010" +
    "\006\011\020\012\013\013\030\062\010\067\011\070\032" +
    "\001\002\000\054\015\uffec\016\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\042\uffec\043\uffec\044\uffec\045\uffec" +
    "\046\uffec\047\uffec\057\uffec\060\uffec\061\uffec\063\uffec\064" +
    "\uffec\065\uffec\066\uffec\071\uffec\001\002\000\054\015\uffef" +
    "\016\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\042" +
    "\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\057\uffef" +
    "\060\uffef\061\uffef\063\uffef\064\uffef\065\uffef\066\uffef\071" +
    "\uffef\001\002\000\054\015\uffd2\016\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\057\uffd2\060\uffd2\061\uffd2\063\uffd2" +
    "\064\uffd2\065\uffd2\066\uffd2\071\uffd2\001\002\000\054\015" +
    "\uffea\016\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea" +
    "\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\057" +
    "\uffea\060\uffea\061\uffea\063\uffea\064\uffea\065\uffea\066\uffea" +
    "\071\uffea\001\002\000\030\004\014\005\015\006\016\007" +
    "\027\010\006\011\020\012\013\013\030\062\010\067\011" +
    "\070\032\001\002\000\030\004\014\005\015\006\016\007" +
    "\027\010\006\011\020\012\013\013\030\062\010\067\011" +
    "\070\032\001\002\000\004\002\130\001\002\000\054\015" +
    "\uffd1\016\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\057" +
    "\uffd1\060\uffd1\061\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1" +
    "\071\uffd1\001\002\000\054\015\uffd4\016\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\057\uffd4\060\uffd4\061\uffd4\063" +
    "\uffd4\064\uffd4\065\uffd4\066\uffd4\071\uffd4\001\002\000\054" +
    "\015\uffcf\016\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\063\uffcf\064\uffcf\065\uffcf\066" +
    "\uffcf\071\uffcf\001\002\000\072\015\uffce\016\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce" +
    "\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061" +
    "\uffce\063\uffce\064\uffce\065\uffce\066\uffce\071\uffce\001\002" +
    "\000\072\015\ufff1\016\ufff1\034\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1" +
    "\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055" +
    "\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\063\ufff1\064\ufff1" +
    "\065\ufff1\066\ufff1\071\ufff1\001\002\000\054\015\uffd3\016" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\042\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\071\uffd3" +
    "\001\002\000\006\015\121\016\123\001\002\000\054\015" +
    "\uffed\016\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\057" +
    "\uffed\060\uffed\061\uffed\063\uffed\064\uffed\065\uffed\066\uffed" +
    "\071\uffed\001\002\000\032\002\001\004\014\005\015\006" +
    "\016\007\027\010\006\011\020\012\013\013\030\062\010" +
    "\067\011\070\032\001\002\000\072\015\ufff2\016\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2" +
    "\061\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\071\ufff2\001" +
    "\002\000\054\015\uffeb\016\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\057\uffeb\060\uffeb\061\uffeb\063\uffeb\064\uffeb" +
    "\065\uffeb\066\uffeb\071\uffeb\001\002\000\052\015\ufffd\016" +
    "\ufffd\034\047\035\061\036\064\037\056\040\044\042\052" +
    "\043\054\044\055\045\065\046\051\047\053\057\045\060" +
    "\060\061\063\063\062\064\057\065\046\066\050\001\002" +
    "\000\072\015\uffcd\016\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd" +
    "\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\071\uffcd\001\002\000\054\015\uffd0\016" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\071\uffd0" +
    "\001\002\000\054\015\uffee\016\uffee\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\042\uffee\043\uffee\044\uffee\045\uffee" +
    "\046\uffee\047\uffee\057\uffee\060\uffee\061\uffee\063\uffee\064" +
    "\uffee\065\uffee\066\uffee\071\uffee\001\002\000\030\004\014" +
    "\005\015\006\016\007\027\010\006\011\020\012\013\013" +
    "\030\062\010\067\011\070\032\001\002\000\072\015\ufff0" +
    "\016\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\042" +
    "\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\042" +
    "\051\036\052\035\053\037\054\034\055\041\056\040\057" +
    "\ufff0\060\ufff0\061\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0" +
    "\071\ufff0\001\002\000\030\004\014\005\015\006\016\007" +
    "\027\010\006\011\020\012\013\013\030\062\010\067\011" +
    "\070\032\001\002\000\030\004\014\005\015\006\016\007" +
    "\027\010\006\011\020\012\013\013\030\062\010\067\011" +
    "\070\032\001\002\000\030\004\014\005\015\006\016\007" +
    "\027\010\006\011\020\012\013\013\030\062\010\067\011" +
    "\070\032\001\002\000\030\004\014\005\015\006\016\007" +
    "\027\010\006\011\020\012\013\013\030\062\010\067\011" +
    "\070\032\001\002\000\030\004\014\005\015\006\016\007" +
    "\027\010\006\011\020\012\013\013\030\062\010\067\011" +
    "\070\032\001\002\000\030\004\014\005\015\006\016\007" +
    "\027\010\006\011\020\012\013\013\030\062\010\067\011" +
    "\070\032\001\002\000\030\004\014\005\015\006\016\007" +
    "\027\010\006\011\020\012\013\013\030\062\010\067\011" +
    "\070\032\001\002\000\054\015\ufffc\016\ufffc\034\047\035" +
    "\061\036\064\037\056\040\044\042\052\043\054\044\055" +
    "\045\065\046\051\047\053\057\045\060\060\061\063\063" +
    "\062\064\057\065\046\066\050\071\ufffc\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\030" +
    "\004\014\005\015\006\016\007\027\010\006\011\020\012" +
    "\013\013\030\062\010\067\011\070\032\001\002\000\040" +
    "\015\uffdd\016\uffdd\034\047\035\061\036\064\037\056\040" +
    "\044\057\045\060\060\061\063\063\062\064\057\065\uffdd" +
    "\066\uffdd\071\uffdd\001\002\000\054\015\uffe0\016\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\047\uffe0\057\uffe0\060\uffe0\061" +
    "\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\071\uffe0\001\002" +
    "\000\054\015\uffe3\016\uffe3\034\047\035\061\036\064\037" +
    "\056\040\044\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\047\uffe3\057\045\060\uffe3\061\uffe3\063\062\064\057\065" +
    "\uffe3\066\uffe3\071\uffe3\001\002\000\054\015\uffe7\016\uffe7" +
    "\034\047\035\061\036\064\037\056\040\044\042\uffe7\043" +
    "\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\071\uffe7\001" +
    "\002\000\054\015\uffe1\016\uffe1\034\uffe1\035\uffe1\036\064" +
    "\037\056\040\044\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046" +
    "\uffe1\047\uffe1\057\uffe1\060\uffe1\061\uffe1\063\uffe1\064\uffe1" +
    "\065\uffe1\066\uffe1\071\uffe1\001\002\000\054\015\uffe4\016" +
    "\uffe4\034\047\035\061\036\064\037\056\040\044\042\uffe4" +
    "\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\057\045\060" +
    "\uffe4\061\uffe4\063\062\064\057\065\uffe4\066\uffe4\071\uffe4" +
    "\001\002\000\054\015\uffe6\016\uffe6\034\047\035\061\036" +
    "\064\037\056\040\044\042\uffe6\043\uffe6\044\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\057\uffe6\060\uffe6\061\uffe6\063\uffe6\064" +
    "\uffe6\065\uffe6\066\uffe6\071\uffe6\001\002\000\054\015\uffdf" +
    "\016\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\057\uffdf" +
    "\060\uffdf\061\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\071" +
    "\uffdf\001\002\000\040\015\uffdc\016\uffdc\034\047\035\061" +
    "\036\064\037\056\040\044\057\045\060\060\061\063\063" +
    "\062\064\057\065\uffdc\066\uffdc\071\uffdc\001\002\000\040" +
    "\015\uffd8\016\uffd8\034\047\035\061\036\064\037\056\040" +
    "\044\057\045\060\060\061\063\063\062\064\057\065\uffd8" +
    "\066\uffd8\071\uffd8\001\002\000\040\015\uffda\016\uffda\034" +
    "\047\035\061\036\064\037\056\040\044\057\045\060\060" +
    "\061\063\063\062\064\057\065\uffda\066\uffda\071\uffda\001" +
    "\002\000\040\015\uffd9\016\uffd9\034\047\035\061\036\064" +
    "\037\056\040\044\057\045\060\060\061\063\063\062\064" +
    "\057\065\uffd9\066\uffd9\071\uffd9\001\002\000\040\015\uffdb" +
    "\016\uffdb\034\047\035\061\036\064\037\056\040\044\057" +
    "\045\060\060\061\063\063\062\064\057\065\uffdb\066\uffdb" +
    "\071\uffdb\001\002\000\054\015\uffd7\016\uffd7\034\047\035" +
    "\061\036\064\037\056\040\044\042\052\043\054\044\055" +
    "\045\065\046\051\047\053\057\045\060\060\061\063\063" +
    "\062\064\057\065\046\066\uffd7\071\uffd7\001\002\000\054" +
    "\015\uffe2\016\uffe2\034\uffe2\035\uffe2\036\064\037\056\040" +
    "\044\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\063\uffe2\064\uffe2\065\uffe2\066" +
    "\uffe2\071\uffe2\001\002\000\054\015\uffd6\016\uffd6\034\047" +
    "\035\061\036\064\037\056\040\044\042\052\043\054\044" +
    "\055\045\065\046\051\047\053\057\045\060\060\061\063" +
    "\063\062\064\057\065\uffd6\066\uffd6\071\uffd6\001\002\000" +
    "\054\015\uffe5\016\uffe5\034\047\035\061\036\064\037\056" +
    "\040\044\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\057\uffe5\060\uffe5\061\uffe5\063\062\064\057\065\uffe5" +
    "\066\uffe5\071\uffe5\001\002\000\054\015\uffde\016\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\042\uffde\043\uffde" +
    "\044\uffde\045\uffde\046\uffde\047\uffde\057\uffde\060\uffde\061" +
    "\uffde\063\uffde\064\uffde\065\uffde\066\uffde\071\uffde\001\002" +
    "\000\054\015\ufff7\016\ufff7\034\047\035\061\036\064\037" +
    "\056\040\044\042\052\043\054\044\055\045\065\046\051" +
    "\047\053\057\045\060\060\061\063\063\062\064\057\065" +
    "\046\066\050\071\ufff7\001\002\000\054\015\ufff6\016\ufff6" +
    "\034\047\035\061\036\064\037\056\040\044\042\052\043" +
    "\054\044\055\045\065\046\051\047\053\057\045\060\060" +
    "\061\063\063\062\064\057\065\046\066\050\071\ufff6\001" +
    "\002\000\054\015\ufff9\016\ufff9\034\047\035\061\036\064" +
    "\037\056\040\044\042\052\043\054\044\055\045\065\046" +
    "\051\047\053\057\045\060\060\061\063\063\062\064\057" +
    "\065\046\066\050\071\ufff9\001\002\000\054\015\ufffb\016" +
    "\ufffb\034\047\035\061\036\064\037\056\040\044\042\052" +
    "\043\054\044\055\045\065\046\051\047\053\057\045\060" +
    "\060\061\063\063\062\064\057\065\046\066\050\071\ufffb" +
    "\001\002\000\054\015\ufffa\016\ufffa\034\047\035\061\036" +
    "\064\037\056\040\044\042\052\043\054\044\055\045\065" +
    "\046\051\047\053\057\045\060\060\061\063\063\062\064" +
    "\057\065\046\066\050\071\ufffa\001\002\000\054\015\ufff8" +
    "\016\ufff8\034\047\035\061\036\064\037\056\040\044\042" +
    "\052\043\054\044\055\045\065\046\051\047\053\057\045" +
    "\060\060\061\063\063\062\064\057\065\046\066\050\071" +
    "\ufff8\001\002\000\050\034\047\035\061\036\064\037\056" +
    "\040\044\042\052\043\054\044\055\045\065\046\051\047" +
    "\053\057\045\060\060\061\063\063\062\064\057\065\046" +
    "\066\050\071\117\001\002\000\054\015\uffd5\016\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\057\uffd5\060\uffd5\061" +
    "\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\071\uffd5\001\002" +
    "\000\006\015\121\016\123\001\002\000\036\002\uffca\004" +
    "\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca" +
    "\013\uffca\015\uffca\016\uffca\062\uffca\067\uffca\070\uffca\001" +
    "\002\000\036\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe" +
    "\010\ufffe\011\ufffe\012\ufffe\013\ufffe\015\125\016\123\062" +
    "\ufffe\067\ufffe\070\ufffe\001\002\000\036\002\uffc8\004\uffc8" +
    "\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\015\uffc8\016\uffc8\062\uffc8\067\uffc8\070\uffc8\001\002" +
    "\000\036\002\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010" +
    "\uffc9\011\uffc9\012\uffc9\013\uffc9\015\uffc9\016\uffc9\062\uffc9" +
    "\067\uffc9\070\uffc9\001\002\000\036\002\uffcc\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\015\uffcc\016\uffcc\062\uffcc\067\uffcc\070\uffcc\001\002\000" +
    "\036\002\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\015\uffcb\016\uffcb\062\uffcb\067" +
    "\uffcb\070\uffcb\001\002\000\036\002\uffff\004\uffff\005\uffff" +
    "\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\015" +
    "\125\016\123\062\uffff\067\uffff\070\uffff\001\002\000\004" +
    "\002\000\001\002\000\054\015\uffe9\016\uffe9\034\047\035" +
    "\061\036\064\037\056\040\044\042\052\043\054\044\055" +
    "\045\065\046\051\047\053\057\045\060\060\061\063\063" +
    "\062\064\057\065\046\066\050\071\uffe9\001\002\000\054" +
    "\015\uffe8\016\uffe8\034\047\035\061\036\064\037\056\040" +
    "\044\042\052\043\054\044\055\045\065\046\051\047\053" +
    "\057\045\060\060\061\063\063\062\064\057\065\046\066" +
    "\050\071\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\034\002\025\006\003\007\004\010\021\011" +
    "\006\012\024\013\030\014\032\015\023\016\016\017\011" +
    "\020\022\021\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\002\131" +
    "\006\003\007\004\010\021\011\006\012\024\013\030\014" +
    "\032\015\023\016\016\001\001\000\026\002\130\006\003" +
    "\007\004\010\021\011\006\012\024\013\030\014\032\015" +
    "\023\016\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\051\126\052\123" +
    "\001\001\000\002\001\001\000\030\002\025\006\003\007" +
    "\004\010\021\011\006\012\024\013\030\014\032\015\023" +
    "\016\016\021\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\115\006\003\007\004\010" +
    "\021\011\006\012\024\013\030\014\032\015\023\016\016" +
    "\001\001\000\002\001\001\000\026\002\114\006\003\007" +
    "\004\010\021\011\006\012\024\013\030\014\032\015\023" +
    "\016\016\001\001\000\026\002\113\006\003\007\004\010" +
    "\021\011\006\012\024\013\030\014\032\015\023\016\016" +
    "\001\001\000\026\002\112\006\003\007\004\010\021\011" +
    "\006\012\024\013\030\014\032\015\023\016\016\001\001" +
    "\000\026\002\111\006\003\007\004\010\021\011\006\012" +
    "\024\013\030\014\032\015\023\016\016\001\001\000\026" +
    "\002\110\006\003\007\004\010\021\011\006\012\024\013" +
    "\030\014\032\015\023\016\016\001\001\000\026\002\107" +
    "\006\003\007\004\010\021\011\006\012\024\013\030\014" +
    "\032\015\023\016\016\001\001\000\026\002\042\006\003" +
    "\007\004\010\021\011\006\012\024\013\030\014\032\015" +
    "\023\016\016\001\001\000\002\001\001\000\026\002\106" +
    "\006\003\007\004\010\021\011\006\012\024\013\030\014" +
    "\032\015\023\016\016\001\001\000\026\002\105\006\003" +
    "\007\004\010\021\011\006\012\024\013\030\014\032\015" +
    "\023\016\016\001\001\000\026\002\104\006\003\007\004" +
    "\010\021\011\006\012\024\013\030\014\032\015\023\016" +
    "\016\001\001\000\026\002\103\006\003\007\004\010\021" +
    "\011\006\012\024\013\030\014\032\015\023\016\016\001" +
    "\001\000\026\002\102\006\003\007\004\010\021\011\006" +
    "\012\024\013\030\014\032\015\023\016\016\001\001\000" +
    "\026\002\101\006\003\007\004\010\021\011\006\012\024" +
    "\013\030\014\032\015\023\016\016\001\001\000\026\002" +
    "\100\006\003\007\004\010\021\011\006\012\024\013\030" +
    "\014\032\015\023\016\016\001\001\000\026\002\077\006" +
    "\003\007\004\010\021\011\006\012\024\013\030\014\032" +
    "\015\023\016\016\001\001\000\026\002\076\006\003\007" +
    "\004\010\021\011\006\012\024\013\030\014\032\015\023" +
    "\016\016\001\001\000\026\002\075\006\003\007\004\010" +
    "\021\011\006\012\024\013\030\014\032\015\023\016\016" +
    "\001\001\000\026\002\074\006\003\007\004\010\021\011" +
    "\006\012\024\013\030\014\032\015\023\016\016\001\001" +
    "\000\026\002\073\006\003\007\004\010\021\011\006\012" +
    "\024\013\030\014\032\015\023\016\016\001\001\000\026" +
    "\002\072\006\003\007\004\010\021\011\006\012\024\013" +
    "\030\014\032\015\023\016\016\001\001\000\026\002\071" +
    "\006\003\007\004\010\021\011\006\012\024\013\030\014" +
    "\032\015\023\016\016\001\001\000\026\002\070\006\003" +
    "\007\004\010\021\011\006\012\024\013\030\014\032\015" +
    "\023\016\016\001\001\000\026\002\067\006\003\007\004" +
    "\010\021\011\006\012\024\013\030\014\032\015\023\016" +
    "\016\001\001\000\026\002\066\006\003\007\004\010\021" +
    "\011\006\012\024\013\030\014\032\015\023\016\016\001" +
    "\001\000\026\002\065\006\003\007\004\010\021\011\006" +
    "\012\024\013\030\014\032\015\023\016\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\121\052\123\001\001\000\002\001\001\000\004" +
    "\052\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  Hashtable<String, VarInfo> varTable = new Hashtable<String,VarInfo>();

	private final int PLUS = 1;
	private final int MINUS = 2;
	private final int DIV = 3;
	private final int MUL = 4;
	private final int EXP = 5;
	private final int MOD = 6;

	private VarInfo calcVarInfo_int_result(VarInfo num1, VarInfo num2, int operator){
		if(num1.getType() == VarInfo.ERROR && num2.getType() == VarInfo.ERROR)
			return new VarInfo(VarInfo.ERROR, (String)num1.getContent() + "; " + (String)num2.getContent());
		else if(num1.getType() == VarInfo.ERROR)
			return num1;
		else if(num2.getType() == VarInfo.ERROR)
			return num2;
		else{
			int int_result = 0;
			switch(operator){
				case MUL:
				int_result = (int)num1.getContent() * (int)num2.getContent();
				break;
				case DIV:
					if((int)num2.getContent() == 0){
						return new VarInfo(VarInfo.ERROR, "Zero division");
					}
					int_result = (int)num1.getContent() / (int)num2.getContent();
					break;
				case PLUS:
					int_result = (int)num1.getContent() + (int)num2.getContent();
				break;
				case MINUS:
					int_result = (int)num1.getContent() - (int)num2.getContent();
				break;
				case MOD:
					int_result = (int)num1.getContent() % (int)num2.getContent();
				break;
				case EXP:
					int_result = (int)Math.pow((int)num1.getContent(), (int)num2.getContent());
				break;
	        	}
		return new VarInfo(VarInfo.INT_TYPE, int_result);
		}
	}


      private VarInfo calcVarInfo_float_result(VarInfo num1, VarInfo num2, int operator){
          if(num1.getType() == VarInfo.ERROR && num2.getType() == VarInfo.ERROR)
             return new VarInfo(VarInfo.ERROR, (String)num1.getContent() + "; " + (String)num2.getContent());
          else if(num1.getType() == VarInfo.ERROR)
             return num1;
          else if(num2.getType() == VarInfo.ERROR)
             return num2;
          else{
             double float_result = 0;
             double op1 = ((Number) num1.getContent()).doubleValue();
             double op2 = ((Number) num2.getContent()).doubleValue();
             switch(operator){
                case MUL:
                    float_result = op1 * op2;
                    break;
                case DIV:
                    if(op2 == 0){
                        return new VarInfo(VarInfo.ERROR, "Zero division");
                    }
                    float_result = op1 / op2;
                    break;
                case PLUS:
                    float_result = op1 + op2;
                    break;
                case MINUS:
                    float_result = op1 - op2;
                    break;
                case MOD:
                    float_result = op1 % op2;
                    break;
                case EXP:
                    float_result = Math.pow(op1, op2);
                    break;
             }
             return new VarInfo(VarInfo.FLOAT_TYPE, float_result);
          }
        }

        public VarInfo calcVarInfo_string_result(VarInfo str, VarInfo num){
            if(str.getType() == VarInfo.ERROR && num.getType() == VarInfo.ERROR)
                    return new VarInfo(VarInfo.ERROR, (String)str.getContent() + "; " + (String)num.getContent());
               else if(num.getType() == VarInfo.ERROR)
                    return num;
               else if(str.getType() == VarInfo.ERROR)
                    return str;
               else{
                  int reps = (int)num.getContent();
                  if(reps < 0){
                     return new VarInfo(VarInfo.ERROR, "Negative Argument");
                  }
                  else{
                      String s = (String)str.getContent();
                      String result = "";
                      for(int i=0;i<reps;i++)
                         result += s;
                      return new VarInfo(VarInfo.STRING_TYPE, result);
                  }
              }
        }

        public VarInfo checkVarError(VarInfo var1, VarInfo var2){
            VarInfo result = null;
            if(var1.getType() == VarInfo.ERROR && var2.getType() == VarInfo.ERROR)
              result = new VarInfo(VarInfo.ERROR, (String)var1.getContent() + "; " + (String)var2.getContent());
            else if(var1.getType() == VarInfo.ERROR)
               result = var1;
            else if(var2.getType() == VarInfo.ERROR)
               result = var2;
            return result;
        }


        public boolean checkIncompatibleType(VarInfo var1, VarInfo var2){
          if(var1.getType() == var2.getType() || (var1.getType() == VarInfo.INT_TYPE || var1.getType() == VarInfo.FLOAT_TYPE) && (var2.getType() == VarInfo.INT_TYPE || var2.getType() == VarInfo.FLOAT_TYPE))
              return false;
          return true;
        }

        public int calcVariInfo_compare(VarInfo var1, VarInfo var2){
          if(var1.getType() == VarInfo.NIL_TYPE && var2.getType() == VarInfo.NIL_TYPE)
            return 0;
          else if((var1.getType() == VarInfo.INT_TYPE || var1.getType() == VarInfo.FLOAT_TYPE) && (var2.getType() == VarInfo.INT_TYPE || var2.getType() == VarInfo.FLOAT_TYPE)){
            Comparable v1 = (Comparable)((Number) var1.getContent()).doubleValue();
            Comparable v2 = (Comparable)((Number) var2.getContent()).doubleValue();
            return v1.compareTo(v2);
          }
          else{
            Comparable v1 = (Comparable) var1.getContent();
            Comparable v2 = (Comparable) var2.getContent();
            return v1.compareTo(v2);
          }
        }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= expression_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expression_list ::= expression terminator 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression_list ::= expression_list expression terminator 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expression ::= rvalue 
            {
              Object RESULT =null;
		int resultleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo result = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(result); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // assignment ::= lvalue ASSIGN rvalue 
            {
              VarInfo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo value = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 varTable.put(var, value);
             RESULT = value;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // assignment ::= lvalue PLUS_ASSIGN rvalue 
            {
              VarInfo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // assignment ::= lvalue MINUS_ASSIGN rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // assignment ::= lvalue MUL_ASSIGN rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // assignment ::= lvalue DIV_ASSIGN rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // assignment ::= lvalue MOD_ASSIGN rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // assignment ::= lvalue EXP_ASSIGN rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // string_result ::= string_result MUL int_result 
            {
              VarInfo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo str = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo num = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = calcVarInfo_string_result(str, num);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_result",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // string_result ::= int_result MUL string_result 
            {
              VarInfo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo num = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo str = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = calcVarInfo_string_result(str, num);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_result",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // string_result ::= literal_t 
            {
              VarInfo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo str = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = str;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_result",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lvalue ::= id 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lvalue ::= id_global 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // rvalue ::= lvalue 
            {
              VarInfo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(varTable.containsKey(var))
               RESULT = varTable.get(var);
             else
                RESULT = new VarInfo(VarInfo.ERROR, "Error: Variable sin inicializar");
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // rvalue ::= literal_t 
            {
              VarInfo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo str = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = str;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // rvalue ::= assignment 
            {
              VarInfo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // rvalue ::= bool_t 
            {
              VarInfo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // rvalue ::= nil_t 
            {
              VarInfo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // rvalue ::= float_t 
            {
              VarInfo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo num = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = num;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // rvalue ::= int_t 
            {
              VarInfo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo num = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = num;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // rvalue ::= NOT rvalue 
            {
              VarInfo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             if(var.getType() == VarInfo.ERROR)
               RESULT = var;
             else{
               if(var.getType() == VarInfo.NIL_TYPE || var.getType() == VarInfo.BOOL_TYPE && !((Boolean)var.getContent()).booleanValue())
                 RESULT = new VarInfo(VarInfo.BOOL_TYPE, true);
               else
                 RESULT = new VarInfo(VarInfo.BOOL_TYPE, false);
             }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // rvalue ::= BIT_NOT rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // rvalue ::= rvalue BIT_SHL rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // rvalue ::= rvalue BIT_SHR rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // rvalue ::= rvalue BIT_AND rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rvalue ::= rvalue BIT_OR rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rvalue ::= rvalue BIT_XOR rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rvalue ::= rvalue PLUS rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            VarInfo varError = checkVarError(var1, var2);
            if(varError != null)
              RESULT = varError;
            else if(var1.getType() == VarInfo.INT_TYPE && var2.getType() == VarInfo.INT_TYPE)
              RESULT = calcVarInfo_int_result(var1, var2, PLUS);
            else if((var1.getType() == VarInfo.INT_TYPE || var1.getType() == VarInfo.FLOAT_TYPE) && (var2.getType() == VarInfo.INT_TYPE || var2.getType() == VarInfo.FLOAT_TYPE))
              RESULT = calcVarInfo_float_result(var1, var2, PLUS);
            else if(var1.getType() == VarInfo.STRING_TYPE && var2.getType() == VarInfo.STRING_TYPE)
              RESULT = new VarInfo(VarInfo.STRING_TYPE, (String)var1.getContent() + (String)var2.getContent());
            else
              RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles");
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // rvalue ::= rvalue MINUS rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            VarInfo varError = checkVarError(var1, var2);
            if(varError != null)
              RESULT = varError;
            else if(var1.getType() == VarInfo.INT_TYPE && var2.getType() == VarInfo.INT_TYPE)
              RESULT = calcVarInfo_int_result(var1, var2, MINUS);
            else if((var1.getType() == VarInfo.INT_TYPE || var1.getType() == VarInfo.FLOAT_TYPE) && (var2.getType() == VarInfo.INT_TYPE || var2.getType() == VarInfo.FLOAT_TYPE))
              RESULT = calcVarInfo_float_result(var1, var2, MINUS);
            else
              RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles");
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rvalue ::= rvalue MUL rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            VarInfo varError = checkVarError(var1, var2);
            if(varError != null)
              RESULT = varError;
            else if(var1.getType() == VarInfo.INT_TYPE && var2.getType() == VarInfo.INT_TYPE)
              RESULT = calcVarInfo_int_result(var1, var2, MUL);
            else if((var1.getType() == VarInfo.INT_TYPE || var1.getType() == VarInfo.FLOAT_TYPE) && (var2.getType() == VarInfo.INT_TYPE || var2.getType() == VarInfo.FLOAT_TYPE))
              RESULT = calcVarInfo_float_result(var1, var2, MUL);
            else if(var1.getType() == VarInfo.STRING_TYPE && var2.getType() == VarInfo.INT_TYPE)
              RESULT = calcVarInfo_string_result(var1, var2);
            else if(var1.getType() == VarInfo.INT_TYPE && var2.getType() == VarInfo.STRING_TYPE)
              RESULT = calcVarInfo_string_result(var2, var1);
            else
              RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles");
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rvalue ::= rvalue DIV rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            VarInfo varError = checkVarError(var1, var2);
            if(varError != null)
              RESULT = varError;
            else if(var1.getType() == VarInfo.INT_TYPE && var2.getType() == VarInfo.INT_TYPE)
              RESULT = calcVarInfo_int_result(var1, var2, DIV);
            else if((var1.getType() == VarInfo.INT_TYPE || var1.getType() == VarInfo.FLOAT_TYPE) && (var2.getType() == VarInfo.INT_TYPE || var2.getType() == VarInfo.FLOAT_TYPE))
              RESULT = calcVarInfo_float_result(var1, var2, DIV);
            else
              RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles");
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rvalue ::= rvalue MOD rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            VarInfo varError = checkVarError(var1, var2);
            if(varError != null)
              RESULT = varError;
            else if(var1.getType() == VarInfo.INT_TYPE && var2.getType() == VarInfo.INT_TYPE)
              RESULT = calcVarInfo_int_result(var1, var2, MOD);
            else if((var1.getType() == VarInfo.INT_TYPE || var1.getType() == VarInfo.FLOAT_TYPE) && (var2.getType() == VarInfo.INT_TYPE || var2.getType() == VarInfo.FLOAT_TYPE))
              RESULT = calcVarInfo_float_result(var1, var2, MOD);
            else
              RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles");
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rvalue ::= rvalue LESS rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            VarInfo varError = checkVarError(var1, var2);
            if(varError != null)
              RESULT = varError;
            else
              if(checkIncompatibleType(var1, var2))
                RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles para comparar.");
              else{
                boolean result = calcVariInfo_compare(var1, var2) < 0;
                RESULT =  new VarInfo(VarInfo.BOOL_TYPE, result);
            }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // rvalue ::= rvalue GREATER rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            VarInfo varError = checkVarError(var1, var2);
            if(varError != null)
              RESULT = varError;
            else
              if(checkIncompatibleType(var1, var2))
                RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles para comparar.");
              else{
                boolean result = calcVariInfo_compare(var1, var2) > 0;
                RESULT =  new VarInfo(VarInfo.BOOL_TYPE, result);
            }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // rvalue ::= rvalue LESS_EQUAL rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            VarInfo varError = checkVarError(var1, var2);
            if(varError != null)
              RESULT = varError;
            else
              if(checkIncompatibleType(var1, var2))
                RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles para comparar.");
              else{
                boolean result = calcVariInfo_compare(var1, var2) <= 0;
                RESULT =  new VarInfo(VarInfo.BOOL_TYPE, result);
            }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // rvalue ::= rvalue GREATER_EQUAL rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            VarInfo varError = checkVarError(var1, var2);
            if(varError != null)
              RESULT = varError;
            else
              if(checkIncompatibleType(var1, var2))
                RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles para comparar.");
              else{
                boolean result = calcVariInfo_compare(var1, var2) >= 0;
                RESULT =  new VarInfo(VarInfo.BOOL_TYPE, result);
            }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // rvalue ::= rvalue EQUAL rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            VarInfo varError = checkVarError(var1, var2);
            if(varError != null)
              RESULT = varError;
            else
              if(checkIncompatibleType(var1, var2))
                RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles para comparar.");
              else{
                boolean result = calcVariInfo_compare(var1, var2) == 0;
                RESULT =  new VarInfo(VarInfo.BOOL_TYPE, result);
            }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // rvalue ::= rvalue NOT_EQUAL rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            VarInfo varError = checkVarError(var1, var2);
            if(varError != null)
              RESULT = varError;
            else
              if(checkIncompatibleType(var1, var2))
                RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles para comparar.");
              else{
                boolean result = calcVariInfo_compare(var1, var2) != 0;
                RESULT =  new VarInfo(VarInfo.BOOL_TYPE, result);
            }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rvalue ::= rvalue OR rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            VarInfo varError = checkVarError(var1, var2);
            if(varError != null)
              RESULT = varError;
            else{
              if(var1.getType() == VarInfo.NIL_TYPE || var1.getType() == VarInfo.BOOL_TYPE && !((Boolean)var1.getContent()).booleanValue())
                RESULT = var2;
              else
                RESULT = var1;
            }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // rvalue ::= rvalue AND rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            VarInfo varError = checkVarError(var1, var2);
            if(varError != null)
              RESULT = varError;
            else{
              if(var1.getType() == VarInfo.NIL_TYPE || var1.getType() == VarInfo.BOOL_TYPE && !((Boolean)var1.getContent()).booleanValue())
                RESULT = var1;
              else
                RESULT = var2;
            }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rvalue ::= LEFT_RBRACKET rvalue RIGHT_RBRACKET 
            {
              VarInfo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarInfo val = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = val;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // literal_t ::= LITERAL 
            {
              VarInfo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarInfo(VarInfo.STRING_TYPE, str); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_t",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // float_t ::= FLOAT 
            {
              VarInfo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarInfo(VarInfo.FLOAT_TYPE, num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float_t",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // int_t ::= INT 
            {
              VarInfo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarInfo(VarInfo.INT_TYPE, num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_t",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bool_t ::= TRUE 
            {
              VarInfo RESULT =null;
		 RESULT = new VarInfo(VarInfo.BOOL_TYPE, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_t",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bool_t ::= FALSE 
            {
              VarInfo RESULT =null;
		 RESULT = new VarInfo(VarInfo.BOOL_TYPE, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_t",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // nil_t ::= NIL 
            {
              VarInfo RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nil = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarInfo(VarInfo.NIL_TYPE, nil); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nil_t",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // id ::= ID 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // id_global ::= ID_GLOBAL 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_global",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // terminator ::= terminator SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminator",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // terminator ::= terminator crlf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminator",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // terminator ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminator",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // terminator ::= crlf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminator",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // crlf ::= CRLF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crlf",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
