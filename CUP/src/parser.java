
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Hashtable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\014\003\000\002\002\004\000\002\015" +
    "\004\000\002\015\005\000\002\016\003\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\011\003\000\002\011\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\004\000" +
    "\002\002\004\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\004\003\000\002\007\003" +
    "\000\002\006\003\000\002\005\003\000\002\005\003\000" +
    "\002\003\003\000\002\012\003\000\002\013\003\000\002" +
    "\017\004\000\002\017\004\000\002\017\003\000\002\017" +
    "\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\030\004\014\005\015\006\016\007\027\010" +
    "\005\011\020\012\013\013\030\044\010\051\011\052\032" +
    "\001\002\000\056\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\041\uffef\042\uffef\043\uffef\045" +
    "\uffef\046\uffef\047\uffef\050\uffef\053\uffef\001\002\000\056" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\041\uffd4\042\uffd4\043\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\053\uffd4\001\002\000\056\014\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\041\ufff2" +
    "\042\ufff2\043\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\053" +
    "\ufff2\001\002\000\056\014\uffed\015\uffed\016\uffed\017\uffed" +
    "\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\041\uffed\042\uffed\043\uffed" +
    "\045\uffed\046\uffed\047\uffed\050\uffed\053\uffed\001\002\000" +
    "\030\004\014\005\015\006\016\007\027\010\005\011\020" +
    "\012\013\013\030\044\010\051\011\052\032\001\002\000" +
    "\030\004\014\005\015\006\016\007\027\010\005\011\020" +
    "\012\013\013\030\044\010\051\011\052\032\001\002\000" +
    "\004\002\132\001\002\000\056\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\053\uffd3\001" +
    "\002\000\056\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\041\uffd6\042\uffd6\043\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\053\uffd6\001\002\000\056\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\041\uffd1\042\uffd1\043\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\053\uffd1\001\002\000\074\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\053" +
    "\uffd0\001\002\000\074\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\053\ufff4\001\002" +
    "\000\056\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\041\uffd5\042\uffd5\043\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\053\uffd5\001\002\000\006\014\123" +
    "\015\125\001\002\000\056\014\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\031\ufff0\041\ufff0\042\ufff0\043" +
    "\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\053\ufff0\001\002" +
    "\000\032\002\001\004\014\005\015\006\016\007\027\010" +
    "\005\011\020\012\013\013\030\044\010\051\011\052\032" +
    "\001\002\000\074\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5" +
    "\045\ufff5\046\ufff5\047\ufff5\050\ufff5\053\ufff5\001\002\000" +
    "\056\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\041\uffee\042\uffee\043\uffee\045\uffee\046\uffee" +
    "\047\uffee\050\uffee\053\uffee\001\002\000\054\014\ufffd\015" +
    "\ufffd\016\047\017\062\020\065\021\057\022\044\023\056" +
    "\024\052\025\054\026\055\027\066\030\051\031\053\041" +
    "\045\042\061\043\064\045\063\046\060\047\046\050\050" +
    "\001\002\000\074\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\050\uffcf\053\uffcf\001\002\000" +
    "\056\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\041\uffd2\042\uffd2\043\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\053\uffd2\001\002\000\056\014\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\041" +
    "\ufff1\042\ufff1\043\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1" +
    "\053\ufff1\001\002\000\030\004\014\005\015\006\016\007" +
    "\027\010\005\011\020\012\013\013\030\044\010\051\011" +
    "\052\032\001\002\000\074\014\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\042\033\036\034" +
    "\035\035\037\036\034\037\041\040\040\041\ufff3\042\ufff3" +
    "\043\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\053\ufff3\001" +
    "\002\000\030\004\014\005\015\006\016\007\027\010\005" +
    "\011\020\012\013\013\030\044\010\051\011\052\032\001" +
    "\002\000\030\004\014\005\015\006\016\007\027\010\005" +
    "\011\020\012\013\013\030\044\010\051\011\052\032\001" +
    "\002\000\030\004\014\005\015\006\016\007\027\010\005" +
    "\011\020\012\013\013\030\044\010\051\011\052\032\001" +
    "\002\000\030\004\014\005\015\006\016\007\027\010\005" +
    "\011\020\012\013\013\030\044\010\051\011\052\032\001" +
    "\002\000\030\004\014\005\015\006\016\007\027\010\005" +
    "\011\020\012\013\013\030\044\010\051\011\052\032\001" +
    "\002\000\030\004\014\005\015\006\016\007\027\010\005" +
    "\011\020\012\013\013\030\044\010\051\011\052\032\001" +
    "\002\000\030\004\014\005\015\006\016\007\027\010\005" +
    "\011\020\012\013\013\030\044\010\051\011\052\032\001" +
    "\002\000\056\014\ufffc\015\ufffc\016\047\017\062\020\065" +
    "\021\057\022\044\023\056\024\052\025\054\026\055\027" +
    "\066\030\051\031\053\041\045\042\061\043\064\045\063" +
    "\046\060\047\046\050\050\053\ufffc\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\030\004" +
    "\014\005\015\006\016\007\027\010\005\011\020\012\013" +
    "\013\030\044\010\051\011\052\032\001\002\000\042\014" +
    "\uffdf\015\uffdf\016\047\017\062\020\065\021\057\022\044" +
    "\023\056\041\045\042\061\043\064\045\063\046\060\047" +
    "\uffdf\050\uffdf\053\uffdf\001\002\000\056\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\056\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\053" +
    "\uffe3\001\002\000\056\014\uffe6\015\uffe6\016\047\017\062" +
    "\020\065\021\057\022\044\023\056\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\041\045\042\uffe6\043\uffe6" +
    "\045\063\046\060\047\uffe6\050\uffe6\053\uffe6\001\002\000" +
    "\056\014\uffea\015\uffea\016\047\017\062\020\065\021\057" +
    "\022\044\023\056\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\041\uffea\042\uffea\043\uffea\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\053\uffea\001\002\000\056\014\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\065\021\057\022\044\023\056" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\041" +
    "\uffe4\042\uffe4\043\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\053\uffe4\001\002\000\056\014\uffe7\015\uffe7\016\047\017" +
    "\062\020\065\021\057\022\044\023\056\024\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\031\uffe7\041\045\042\uffe7\043" +
    "\uffe7\045\063\046\060\047\uffe7\050\uffe7\053\uffe7\001\002" +
    "\000\056\014\uffe9\015\uffe9\016\047\017\062\020\065\021" +
    "\057\022\044\023\056\024\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\041\uffe9\042\uffe9\043\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\053\uffe9\001\002\000\056\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\056\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2\047\uffe2\050" +
    "\uffe2\053\uffe2\001\002\000\056\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\056\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\053\uffe0\001" +
    "\002\000\042\014\uffde\015\uffde\016\047\017\062\020\065" +
    "\021\057\022\044\023\056\041\045\042\061\043\064\045" +
    "\063\046\060\047\uffde\050\uffde\053\uffde\001\002\000\042" +
    "\014\uffda\015\uffda\016\047\017\062\020\065\021\057\022" +
    "\044\023\056\041\045\042\061\043\064\045\063\046\060" +
    "\047\uffda\050\uffda\053\uffda\001\002\000\042\014\uffdc\015" +
    "\uffdc\016\047\017\062\020\065\021\057\022\044\023\056" +
    "\041\045\042\061\043\064\045\063\046\060\047\uffdc\050" +
    "\uffdc\053\uffdc\001\002\000\042\014\uffdb\015\uffdb\016\047" +
    "\017\062\020\065\021\057\022\044\023\056\041\045\042" +
    "\061\043\064\045\063\046\060\047\uffdb\050\uffdb\053\uffdb" +
    "\001\002\000\042\014\uffdd\015\uffdd\016\047\017\062\020" +
    "\065\021\057\022\044\023\056\041\045\042\061\043\064" +
    "\045\063\046\060\047\uffdd\050\uffdd\053\uffdd\001\002\000" +
    "\056\014\uffd9\015\uffd9\016\047\017\062\020\065\021\057" +
    "\022\044\023\056\024\052\025\054\026\055\027\066\030" +
    "\051\031\053\041\045\042\061\043\064\045\063\046\060" +
    "\047\046\050\uffd9\053\uffd9\001\002\000\056\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\020\065\021\057\022\044\023\056" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\041" +
    "\uffe5\042\uffe5\043\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\053\uffe5\001\002\000\056\014\uffd8\015\uffd8\016\047\017" +
    "\062\020\065\021\057\022\044\023\056\024\052\025\054" +
    "\026\055\027\066\030\051\031\053\041\045\042\061\043" +
    "\064\045\063\046\060\047\uffd8\050\uffd8\053\uffd8\001\002" +
    "\000\056\014\uffe8\015\uffe8\016\047\017\062\020\065\021" +
    "\057\022\044\023\056\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\041\uffe8\042\uffe8\043\uffe8\045\063\046" +
    "\060\047\uffe8\050\uffe8\053\uffe8\001\002\000\056\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\056\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\045\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\053\uffe1\001\002\000\056\014\ufff7\015\ufff7\016\047" +
    "\017\062\020\065\021\057\022\044\023\056\024\052\025" +
    "\054\026\055\027\066\030\051\031\053\041\045\042\061" +
    "\043\064\045\063\046\060\047\046\050\050\053\ufff7\001" +
    "\002\000\056\014\ufff6\015\ufff6\016\047\017\062\020\065" +
    "\021\057\022\044\023\056\024\052\025\054\026\055\027" +
    "\066\030\051\031\053\041\045\042\061\043\064\045\063" +
    "\046\060\047\046\050\050\053\ufff6\001\002\000\056\014" +
    "\ufff9\015\ufff9\016\047\017\062\020\065\021\057\022\044" +
    "\023\056\024\052\025\054\026\055\027\066\030\051\031" +
    "\053\041\045\042\061\043\064\045\063\046\060\047\046" +
    "\050\050\053\ufff9\001\002\000\056\014\ufffb\015\ufffb\016" +
    "\047\017\062\020\065\021\057\022\044\023\056\024\052" +
    "\025\054\026\055\027\066\030\051\031\053\041\045\042" +
    "\061\043\064\045\063\046\060\047\046\050\050\053\ufffb" +
    "\001\002\000\056\014\ufffa\015\ufffa\016\047\017\062\020" +
    "\065\021\057\022\044\023\056\024\052\025\054\026\055" +
    "\027\066\030\051\031\053\041\045\042\061\043\064\045" +
    "\063\046\060\047\046\050\050\053\ufffa\001\002\000\056" +
    "\014\ufff8\015\ufff8\016\047\017\062\020\065\021\057\022" +
    "\044\023\056\024\052\025\054\026\055\027\066\030\051" +
    "\031\053\041\045\042\061\043\064\045\063\046\060\047" +
    "\046\050\050\053\ufff8\001\002\000\052\016\047\017\062" +
    "\020\065\021\057\022\044\023\056\024\052\025\054\026" +
    "\055\027\066\030\051\031\053\041\045\042\061\043\064" +
    "\045\063\046\060\047\046\050\050\053\121\001\002\000" +
    "\056\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\041\uffd7\042\uffd7\043\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\050\uffd7\053\uffd7\001\002\000\006\014\123\015" +
    "\125\001\002\000\036\002\uffcc\004\uffcc\005\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015" +
    "\uffcc\044\uffcc\051\uffcc\052\uffcc\001\002\000\036\002\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\014\127\015\125\044\ufffe\051\ufffe\052\ufffe" +
    "\001\002\000\036\002\uffca\004\uffca\005\uffca\006\uffca\007" +
    "\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca" +
    "\044\uffca\051\uffca\052\uffca\001\002\000\036\002\uffcb\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\044\uffcb\051\uffcb\052\uffcb\001" +
    "\002\000\036\002\uffce\004\uffce\005\uffce\006\uffce\007\uffce" +
    "\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\044" +
    "\uffce\051\uffce\052\uffce\001\002\000\036\002\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\044\uffcd\051\uffcd\052\uffcd\001\002" +
    "\000\036\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010" +
    "\uffff\011\uffff\012\uffff\013\uffff\014\127\015\125\044\uffff" +
    "\051\uffff\052\uffff\001\002\000\004\002\000\001\002\000" +
    "\056\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\041\uffec\042\uffec\043\uffec\045\uffec\046\uffec" +
    "\047\uffec\050\uffec\053\uffec\001\002\000\056\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\041" +
    "\uffeb\042\uffeb\043\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb" +
    "\053\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\034\002\025\003\003\004\005\005\021\006" +
    "\006\007\024\010\030\011\032\012\023\013\016\014\011" +
    "\015\022\016\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\002\133" +
    "\003\003\004\005\005\021\006\006\007\024\010\030\011" +
    "\032\012\023\013\016\001\001\000\026\002\132\003\003" +
    "\004\005\005\021\006\006\007\024\010\030\011\032\012" +
    "\023\013\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\130\020\125" +
    "\001\001\000\002\001\001\000\030\002\025\003\003\004" +
    "\005\005\021\006\006\007\024\010\030\011\032\012\023" +
    "\013\016\016\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\117\003\003\004\005\005" +
    "\021\006\006\007\024\010\030\011\032\012\023\013\016" +
    "\001\001\000\002\001\001\000\026\002\116\003\003\004" +
    "\005\005\021\006\006\007\024\010\030\011\032\012\023" +
    "\013\016\001\001\000\026\002\115\003\003\004\005\005" +
    "\021\006\006\007\024\010\030\011\032\012\023\013\016" +
    "\001\001\000\026\002\114\003\003\004\005\005\021\006" +
    "\006\007\024\010\030\011\032\012\023\013\016\001\001" +
    "\000\026\002\113\003\003\004\005\005\021\006\006\007" +
    "\024\010\030\011\032\012\023\013\016\001\001\000\026" +
    "\002\112\003\003\004\005\005\021\006\006\007\024\010" +
    "\030\011\032\012\023\013\016\001\001\000\026\002\111" +
    "\003\003\004\005\005\021\006\006\007\024\010\030\011" +
    "\032\012\023\013\016\001\001\000\026\002\042\003\003" +
    "\004\005\005\021\006\006\007\024\010\030\011\032\012" +
    "\023\013\016\001\001\000\002\001\001\000\026\002\110" +
    "\003\003\004\005\005\021\006\006\007\024\010\030\011" +
    "\032\012\023\013\016\001\001\000\026\002\107\003\003" +
    "\004\005\005\021\006\006\007\024\010\030\011\032\012" +
    "\023\013\016\001\001\000\026\002\106\003\003\004\005" +
    "\005\021\006\006\007\024\010\030\011\032\012\023\013" +
    "\016\001\001\000\026\002\105\003\003\004\005\005\021" +
    "\006\006\007\024\010\030\011\032\012\023\013\016\001" +
    "\001\000\026\002\104\003\003\004\005\005\021\006\006" +
    "\007\024\010\030\011\032\012\023\013\016\001\001\000" +
    "\026\002\103\003\003\004\005\005\021\006\006\007\024" +
    "\010\030\011\032\012\023\013\016\001\001\000\026\002" +
    "\102\003\003\004\005\005\021\006\006\007\024\010\030" +
    "\011\032\012\023\013\016\001\001\000\026\002\101\003" +
    "\003\004\005\005\021\006\006\007\024\010\030\011\032" +
    "\012\023\013\016\001\001\000\026\002\100\003\003\004" +
    "\005\005\021\006\006\007\024\010\030\011\032\012\023" +
    "\013\016\001\001\000\026\002\077\003\003\004\005\005" +
    "\021\006\006\007\024\010\030\011\032\012\023\013\016" +
    "\001\001\000\026\002\076\003\003\004\005\005\021\006" +
    "\006\007\024\010\030\011\032\012\023\013\016\001\001" +
    "\000\026\002\075\003\003\004\005\005\021\006\006\007" +
    "\024\010\030\011\032\012\023\013\016\001\001\000\026" +
    "\002\074\003\003\004\005\005\021\006\006\007\024\010" +
    "\030\011\032\012\023\013\016\001\001\000\026\002\073" +
    "\003\003\004\005\005\021\006\006\007\024\010\030\011" +
    "\032\012\023\013\016\001\001\000\026\002\072\003\003" +
    "\004\005\005\021\006\006\007\024\010\030\011\032\012" +
    "\023\013\016\001\001\000\026\002\071\003\003\004\005" +
    "\005\021\006\006\007\024\010\030\011\032\012\023\013" +
    "\016\001\001\000\026\002\070\003\003\004\005\005\021" +
    "\006\006\007\024\010\030\011\032\012\023\013\016\001" +
    "\001\000\026\002\067\003\003\004\005\005\021\006\006" +
    "\007\024\010\030\011\032\012\023\013\016\001\001\000" +
    "\026\002\066\003\003\004\005\005\021\006\006\007\024" +
    "\010\030\011\032\012\023\013\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\123\020\125\001\001\000\002\001\001" +
    "\000\004\020\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer("Error");
		if (info instanceof java_cup.runtime.Symbol) {
				java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
				if (s.left >= 0) {
						m.append(" en la linea "+(s.left+1));
						if (s.right >= 0)
								m.append(", columna "+(s.right+1));
				}
		}
		m.append(" : "+message);
		System.err.println(m);
}


public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		System.exit(1);
}




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {




/* Tabla de variables */
Hashtable<String, VarInfo> varTable = new Hashtable<String,VarInfo>();


/* Tipos de operación */
private final int PLUS = 1;
private final int MINUS = 2;
private final int DIV = 3;
private final int MUL = 4;
private final int EXP = 5;
private final int MOD = 6;


/* Funciones auxiliares */

/* Funcion que resuelve operaciones aritmeticas de numeros enteros */
private VarInfo calcVarInfo_int_result(VarInfo num1, VarInfo num2, int operator){
		int int_result = 0;
		switch(operator){
			case MUL:
				int_result = (int)num1.getContent() * (int)num2.getContent();
				break;
			case DIV:
				if((int)num2.getContent() == 0)
					return new VarInfo(VarInfo.ERROR, "Zero division");
				int_result = (int)num1.getContent() / (int)num2.getContent();
				break;
			case PLUS:
				int_result = (int)num1.getContent() + (int)num2.getContent();
				break;
			case MINUS:
				int_result = (int)num1.getContent() - (int)num2.getContent();
				break;
			case MOD:
				int_result = (int)num1.getContent() % (int)num2.getContent();
				break;
			case EXP:
				int_result = (int)Math.pow((int)num1.getContent(), (int)num2.getContent());
				break;
		}
		return new VarInfo(VarInfo.INT_TYPE, int_result);
}


/* Funcion que resuelve operaciones aritmeticas de numeros decimales entre si y con enteros */
private VarInfo calcVarInfo_float_result(VarInfo num1, VarInfo num2, int operator){
	double float_result = 0;
	double op1 = ((Number) num1.getContent()).doubleValue();
	double op2 = ((Number) num2.getContent()).doubleValue();
	switch(operator){
		case MUL:
			float_result = op1 * op2;
			break;
		case DIV:
			if(op2 == 0)
				return new VarInfo(VarInfo.ERROR, "Zero division");
			float_result = op1 / op2;
			break;
		case PLUS:
			float_result = op1 + op2;
			break;
		case MINUS:
			float_result = op1 - op2;
			break;
		case MOD:
			float_result = op1 % op2;
			break;
		case EXP:
			float_result = Math.pow(op1, op2);
			break;
	}
	return new VarInfo(VarInfo.FLOAT_TYPE, float_result);
}


/* Funcion que repite un string un numero de veces */
public VarInfo calcVarInfo_string_result(VarInfo str, VarInfo num){
	int reps = (int)num.getContent();
	if(reps < 0){
		return new VarInfo(VarInfo.ERROR, "Argumento negativo");
	}
	else{
		String s = (String)str.getContent();
		String result = "";
		for(int i=0;i<reps;i++)
			result += s;
		return new VarInfo(VarInfo.STRING_TYPE, result);
	}
}


/* Funcion que comprueba si hay algun error en los atributos sintetizados */
public VarInfo checkVarError(VarInfo var1, VarInfo var2){
	VarInfo result = null;
	if(var1.getType() == VarInfo.ERROR && var2.getType() == VarInfo.ERROR)
		result = new VarInfo(VarInfo.ERROR, (String)var1.getContent() + "; " + (String)var2.getContent());
	else if(var1.getType() == VarInfo.ERROR)
		result = var1;
	else if(var2.getType() == VarInfo.ERROR)
		result = var2;
	return result;
}


/* Funcion que comprueba si los tipos son incompatibles para realizar una operacion de comparacion */
public boolean checkIncompatibleComparationType(VarInfo var1, VarInfo var2){
	if(var1.getType() == var2.getType() || (var1.getType() == VarInfo.INT_TYPE || var1.getType() == VarInfo.FLOAT_TYPE) && (var2.getType() == VarInfo.INT_TYPE || var2.getType() == VarInfo.FLOAT_TYPE))
		return false;
	return true;
}


/* Funcion que compara dos rvalues */
public int calcVariInfo_compare(VarInfo var1, VarInfo var2){
	if(var1.getType() == VarInfo.NIL_TYPE && var2.getType() == VarInfo.NIL_TYPE)
		return 0;
	else if((var1.getType() == VarInfo.INT_TYPE || var1.getType() == VarInfo.FLOAT_TYPE) && (var2.getType() == VarInfo.INT_TYPE || var2.getType() == VarInfo.FLOAT_TYPE)){
		Comparable v1 = (Comparable)((Number) var1.getContent()).doubleValue();
		Comparable v2 = (Comparable)((Number) var2.getContent()).doubleValue();
		return v1.compareTo(v2);
	}
	else{
		Comparable v1 = (Comparable) var1.getContent();
		Comparable v2 = (Comparable) var2.getContent();
		return v1.compareTo(v2);
	}
}



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= expression_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expression_list ::= expression terminator 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression_list ::= expression_list expression terminator 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expression ::= rvalue 
            {
              Object RESULT =null;
		int resultleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo result = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
if(result.getType() == VarInfo.ERROR)
	report_error((String)result.getContent(), cur_token);
else
	System.out.println(result);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // assignment ::= lvalue ASSIGN rvalue 
            {
              VarInfo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo value = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
varTable.put(var, value);
RESULT = value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // assignment ::= lvalue PLUS_ASSIGN rvalue 
            {
              VarInfo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // assignment ::= lvalue MINUS_ASSIGN rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // assignment ::= lvalue MUL_ASSIGN rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // assignment ::= lvalue DIV_ASSIGN rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // assignment ::= lvalue MOD_ASSIGN rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // assignment ::= lvalue EXP_ASSIGN rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lvalue ::= id 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lvalue ::= id_global 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // rvalue ::= lvalue 
            {
              VarInfo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
if(varTable.containsKey(var))
	RESULT = varTable.get(var);
else
	RESULT = new VarInfo(VarInfo.ERROR, "Variable sin inicializar");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // rvalue ::= literal_t 
            {
              VarInfo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo str = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = str;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // rvalue ::= assignment 
            {
              VarInfo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = var;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // rvalue ::= bool_t 
            {
              VarInfo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = var;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // rvalue ::= nil_t 
            {
              VarInfo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = var;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // rvalue ::= float_t 
            {
              VarInfo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo num = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = num;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // rvalue ::= int_t 
            {
              VarInfo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo num = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = num;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // rvalue ::= NOT rvalue 
            {
              VarInfo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
if(var.getType() == VarInfo.ERROR)
	RESULT = var;
else{
	if(var.getType() == VarInfo.NIL_TYPE || var.getType() == VarInfo.BOOL_TYPE && !((Boolean)var.getContent()).booleanValue())
		RESULT = new VarInfo(VarInfo.BOOL_TYPE, true);
	else
		RESULT = new VarInfo(VarInfo.BOOL_TYPE, false);
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // rvalue ::= BIT_NOT rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // rvalue ::= rvalue BIT_SHL rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // rvalue ::= rvalue BIT_SHR rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // rvalue ::= rvalue BIT_AND rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // rvalue ::= rvalue BIT_OR rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // rvalue ::= rvalue BIT_XOR rvalue 
            {
              VarInfo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // rvalue ::= rvalue PLUS rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
VarInfo varError = checkVarError(var1, var2);
if(varError != null)
	RESULT = varError;
else if(var1.getType() == VarInfo.INT_TYPE && var2.getType() == VarInfo.INT_TYPE)
	RESULT = calcVarInfo_int_result(var1, var2, PLUS);
else if((var1.getType() == VarInfo.INT_TYPE || var1.getType() == VarInfo.FLOAT_TYPE) && (var2.getType() == VarInfo.INT_TYPE || var2.getType() == VarInfo.FLOAT_TYPE))
	RESULT = calcVarInfo_float_result(var1, var2, PLUS);
else if(var1.getType() == VarInfo.STRING_TYPE && var2.getType() == VarInfo.STRING_TYPE)
	RESULT = new VarInfo(VarInfo.STRING_TYPE, (String)var1.getContent() + (String)var2.getContent());
else
	RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rvalue ::= rvalue MINUS rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
VarInfo varError = checkVarError(var1, var2);
if(varError != null)
	RESULT = varError;
else if(var1.getType() == VarInfo.INT_TYPE && var2.getType() == VarInfo.INT_TYPE)
	RESULT = calcVarInfo_int_result(var1, var2, MINUS);
else if((var1.getType() == VarInfo.INT_TYPE || var1.getType() == VarInfo.FLOAT_TYPE) && (var2.getType() == VarInfo.INT_TYPE || var2.getType() == VarInfo.FLOAT_TYPE))
	RESULT = calcVarInfo_float_result(var1, var2, MINUS);
else
	RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rvalue ::= rvalue MUL rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
VarInfo varError = checkVarError(var1, var2);
if(varError != null)
	RESULT = varError;
else if(var1.getType() == VarInfo.INT_TYPE && var2.getType() == VarInfo.INT_TYPE)
	RESULT = calcVarInfo_int_result(var1, var2, MUL);
else if((var1.getType() == VarInfo.INT_TYPE || var1.getType() == VarInfo.FLOAT_TYPE) && (var2.getType() == VarInfo.INT_TYPE || var2.getType() == VarInfo.FLOAT_TYPE))
	RESULT = calcVarInfo_float_result(var1, var2, MUL);
else if(var1.getType() == VarInfo.STRING_TYPE && var2.getType() == VarInfo.INT_TYPE)
	RESULT = calcVarInfo_string_result(var1, var2);
else if(var1.getType() == VarInfo.INT_TYPE && var2.getType() == VarInfo.STRING_TYPE)
	RESULT = calcVarInfo_string_result(var2, var1);
else
	RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rvalue ::= rvalue DIV rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
VarInfo varError = checkVarError(var1, var2);
if(varError != null)
	RESULT = varError;
else if(var1.getType() == VarInfo.INT_TYPE && var2.getType() == VarInfo.INT_TYPE)
	RESULT = calcVarInfo_int_result(var1, var2, DIV);
else if((var1.getType() == VarInfo.INT_TYPE || var1.getType() == VarInfo.FLOAT_TYPE) && (var2.getType() == VarInfo.INT_TYPE || var2.getType() == VarInfo.FLOAT_TYPE))
	RESULT = calcVarInfo_float_result(var1, var2, DIV);
else
	RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // rvalue ::= rvalue MOD rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
VarInfo varError = checkVarError(var1, var2);
if(varError != null)
	RESULT = varError;
else if(var1.getType() == VarInfo.INT_TYPE && var2.getType() == VarInfo.INT_TYPE)
	RESULT = calcVarInfo_int_result(var1, var2, MOD);
else if((var1.getType() == VarInfo.INT_TYPE || var1.getType() == VarInfo.FLOAT_TYPE) && (var2.getType() == VarInfo.INT_TYPE || var2.getType() == VarInfo.FLOAT_TYPE))
	RESULT = calcVarInfo_float_result(var1, var2, MOD);
else
	RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rvalue ::= rvalue EXP rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
VarInfo varError = checkVarError(var1, var2);
if(varError != null)
	RESULT = varError;
else if(var1.getType() == VarInfo.INT_TYPE && var2.getType() == VarInfo.INT_TYPE)
	RESULT = calcVarInfo_int_result(var1, var2, EXP);
else if((var1.getType() == VarInfo.INT_TYPE || var1.getType() == VarInfo.FLOAT_TYPE) && (var2.getType() == VarInfo.INT_TYPE || var2.getType() == VarInfo.FLOAT_TYPE))
	RESULT = calcVarInfo_float_result(var1, var2, EXP);
else
	RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rvalue ::= rvalue LESS rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
VarInfo varError = checkVarError(var1, var2);
if(varError != null)
	RESULT = varError;
else
if(checkIncompatibleComparationType(var1, var2))
	RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles para comparar.");
else{
	boolean result = calcVariInfo_compare(var1, var2) < 0;
	RESULT =  new VarInfo(VarInfo.BOOL_TYPE, result);
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rvalue ::= rvalue GREATER rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
VarInfo varError = checkVarError(var1, var2);
if(varError != null)
	RESULT = varError;
else
	if(checkIncompatibleComparationType(var1, var2))
		RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles para comparar.");
	else{
		boolean result = calcVariInfo_compare(var1, var2) > 0;
		RESULT =  new VarInfo(VarInfo.BOOL_TYPE, result);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rvalue ::= rvalue LESS_EQUAL rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
VarInfo varError = checkVarError(var1, var2);
if(varError != null)
	RESULT = varError;
else
	if(checkIncompatibleComparationType(var1, var2))
		RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles para comparar.");
	else{
		boolean result = calcVariInfo_compare(var1, var2) <= 0;
		RESULT =  new VarInfo(VarInfo.BOOL_TYPE, result);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // rvalue ::= rvalue GREATER_EQUAL rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
VarInfo varError = checkVarError(var1, var2);
if(varError != null)
	RESULT = varError;
else
	if(checkIncompatibleComparationType(var1, var2))
		RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles para comparar.");
	else{
		boolean result = calcVariInfo_compare(var1, var2) >= 0;
		RESULT =  new VarInfo(VarInfo.BOOL_TYPE, result);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // rvalue ::= rvalue EQUAL rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
VarInfo varError = checkVarError(var1, var2);
if(varError != null)
	RESULT = varError;
else
	if(checkIncompatibleComparationType(var1, var2))
		RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles para comparar.");
	else{
		boolean result = calcVariInfo_compare(var1, var2) == 0;
		RESULT =  new VarInfo(VarInfo.BOOL_TYPE, result);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // rvalue ::= rvalue NOT_EQUAL rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
VarInfo varError = checkVarError(var1, var2);
if(varError != null)
	RESULT = varError;
else
	if(checkIncompatibleComparationType(var1, var2))
		RESULT = new VarInfo(VarInfo.ERROR, "Tipos incompatibles para comparar.");
	else{
		boolean result = calcVariInfo_compare(var1, var2) != 0;
		RESULT =  new VarInfo(VarInfo.BOOL_TYPE, result);
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // rvalue ::= rvalue OR rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
VarInfo varError = checkVarError(var1, var2);
if(varError != null)
	RESULT = varError;
else{
	if(var1.getType() == VarInfo.NIL_TYPE || var1.getType() == VarInfo.BOOL_TYPE && !((Boolean)var1.getContent()).booleanValue())
	RESULT = var2;
	else
		RESULT = var1;
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // rvalue ::= rvalue AND rvalue 
            {
              VarInfo RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarInfo var1 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarInfo var2 = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
VarInfo varError = checkVarError(var1, var2);
if(varError != null)
	RESULT = varError;
else{
	if(var1.getType() == VarInfo.NIL_TYPE || var1.getType() == VarInfo.BOOL_TYPE && !((Boolean)var1.getContent()).booleanValue())
		RESULT = var1;
	else
		RESULT = var2;
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rvalue ::= LEFT_RBRACKET rvalue RIGHT_RBRACKET 
            {
              VarInfo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarInfo val = (VarInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // literal_t ::= LITERAL 
            {
              VarInfo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = new VarInfo(VarInfo.STRING_TYPE, str);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_t",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // float_t ::= FLOAT 
            {
              VarInfo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = new VarInfo(VarInfo.FLOAT_TYPE, num);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("float_t",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // int_t ::= INT 
            {
              VarInfo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = new VarInfo(VarInfo.INT_TYPE, num);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_t",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bool_t ::= TRUE 
            {
              VarInfo RESULT =null;
		
RESULT = new VarInfo(VarInfo.BOOL_TYPE, true);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bool_t ::= FALSE 
            {
              VarInfo RESULT =null;
		
RESULT = new VarInfo(VarInfo.BOOL_TYPE, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_t",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nil_t ::= NIL 
            {
              VarInfo RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nil = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = new VarInfo(VarInfo.NIL_TYPE, nil);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nil_t",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // id ::= ID 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = var;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // id_global ::= ID_GLOBAL 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = var;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_global",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // terminator ::= terminator SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminator",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // terminator ::= terminator crlf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminator",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // terminator ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminator",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // terminator ::= crlf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminator",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // crlf ::= CRLF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("crlf",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
